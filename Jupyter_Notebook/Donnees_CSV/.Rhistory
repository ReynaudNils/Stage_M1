lines(1:len,exp(loglikzipf(c(s.ll[1], s.ll[2]),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(c(s.ll[1], s.ll[2]),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
s.sq <- opt$par
s.ll <- coef(fit)
typeof(s.sq)
s.sq[1]
s.ll[1]
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(c(s.sq[1], s.sq[2]),len)),col="red")
lines(1:len,exp(loglikzipf(c(s.ll[1], s.ll[2]),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(c(s.ll[1], s.ll[2]),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
s.sq <- opt$par
s.ll <- coef(fit)
typeof(s.sq)
s.sq[1]
s.ll[1]
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(c(s.sq[1], s.sq[2]),len)),col="red")
lines(1:len,exp(loglikzipf(c(s.ll[1], s.ll[2]),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(c(s.ll[1], s.ll[2]),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Trifolium.csv")
Data$Rank<-rank( desc (Data$Images_Trifolium))
Data
fr <- unlist(Data['Images_Trifolium'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
s.sq <- opt$par
s.ll <- coef(fit)
typeof(s.sq)
s.sq[1]
s.ll[1]
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(c(s.sq[1], s.sq[2]),len)),col="red")
lines(1:len,exp(loglikzipf(c(s.ll[1], s.ll[2]),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(c(s.ll[1], s.ll[2]),length(p))))
chisq.test(p, exp(loglikzipf(ccoef(fit),length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
Data <- read.csv("Especes_Sedum.csv")
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
loglikzipf <- function(s,N) -s*log(1:N)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(1:len)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p,log="xy")
lines(1:len,exp(loglikzipf(s.sq,len)),col="red")
lines(1:len,exp(loglikzipf(s.ll,len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
fit
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
opt
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
opt
fit
plot(1:len,p,log="xy")
lines(1:len,exp(loglikzipf(s.sq,len)),col="red")
lines(1:len,exp(loglikzipf(s.ll,len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p,log="xy")
lines(1:len,exp(loglikzipf(opt$minimum,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p)
lines(1:len,exp(loglikzipf(opt$minimum,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p)
lines(1:len,exp(loglikzipf(opt$minimum,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p)
lines(1:len,exp(loglikzipf(opt$minimum,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p)
lines(1:len,exp(loglikzipf(opt$minimum,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Comparaison et fitting Zipf-Mandelbrot avec Moindre Carrés et Max de Vraisemblance")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Species")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes.csv")
Data$Rank<-rank( desc (Data$Images_Plante))
Data
fr <- unlist(Data['Images_Plante'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
len
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(s,N) -s*log(rank)-log(sum(1/(1:N)^s))
#Sum of Squares
opt.f <- function(s) sum((log(p)-loglikzipf(s,length(p)))^2)
opt <- optimize(opt.f, c(0, 10))
#Maximum likelihood estimation
negloglikzipf <- function(s) sum(fr*(s*log(rank)+log(sum(1/(1:len)^s))))
fit <- mle(negloglikzipf,start=list(s=1))
s.sq <- opt$minimum
s.ll <- coef(fit)
opt
fit
plot(1:len,p)
lines(1:len,exp(loglikzipf(opt$minimum,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf for Species")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$minimum,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
