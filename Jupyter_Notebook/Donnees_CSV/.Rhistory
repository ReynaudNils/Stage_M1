setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Sedum", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Sedum")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Acacia.csv")
Data$Rank<-rank( desc (Data$Images_Acacia))
Data
fr <- unlist(Data['Images_Acacia'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Acacia", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Acaia")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
plot(1:len,p, xlab="Species of Genera Acacia", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Acacia")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Trifolium.csv")
Data$Rank<-rank( desc (Data$Images_Trifolium))
Data
fr <- unlist(Data['Images_Trifolium'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Trifolium", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Trifolium")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Hypericum.csv")
Data$Rank<-rank( desc (Data$Images_Hypericum))
Data
fr <- unlist(Data['Images_Hypericum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Hypericum", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Hypericum")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Ophrys.csv")
Data$Rank<-rank( desc (Data$Images_Ophrys))
Data
fr <- unlist(Data['Images_Ophrys'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Ophrys", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Ophrys")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Anemone.csv")
Data$Rank<-rank( desc (Data$Images_Anemone))
Data
fr <- unlist(Data['Images_Anemone'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Anemone", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Anemone")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Cirsium.csv")
Data$Rank<-rank( desc (Data$Images_Cirsium))
Data
fr <- unlist(Data['Images_Cirsium'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Cirsium", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Cirsium")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Pelargonium.csv")
Data$Rank<-rank( desc (Data$Images_Pelargonium))
Data
fr <- unlist(Data['Images_Pelargonium'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Pelargonium", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Pelargonium")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Peperomia.csv")
Data$Rank<-rank( desc (Data$Images_Peperomia))
Data
fr <- unlist(Data['Images_Peperomia'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Peperomia.csv")
Data$Rank<-rank( desc (Data$Images_Peperomia))
Data
fr <- unlist(Data['Images_Peperomia'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
coef(fit)
opt$par
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0))
opt <- optim(par = c(2, 4), opt.f)
opt$par
plot(1:len,p, xlab="Species of Genera Peperomia", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Peperomia")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
help(optim)
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Lupinus.csv")
Data$Rank<-rank( desc (Data$Images_Lupinus))
Data
fr <- unlist(Data['Images_Lupinus'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Lupinus", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Lupinus")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Dryopteris.csv")
Data$Rank<-rank( desc (Data$Images_Dryopteris))
Data
fr <- unlist(Data['Images_Dryopteris'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Dryopteris", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Dryopteris")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Lactuca.csv")
Data$Rank<-rank( desc (Data$Images_Lactuca))
Data
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Lactuca.csv")
Data$Rank<-rank( desc (Data$Images_Lactuca))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Lactuca.csv")
Data$Rank<-rank( desc (Data$Nombre_Images))
Data
fr <- unlist(Data['Nombre_Images'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Lactuca", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Lactuca")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Tradescantia.csv")
Data$Rank<-rank( desc (Data$Images_Tradescantia))
Data
fr <- unlist(Data['Images_Tradescantia'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Tradescantia.csv")
Data$Rank<-rank( desc (Data$Images_Tradescantia))
Data
fr <- unlist(Data['Images_Tradescantia'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f)
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Tradescantia", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Tradescantia")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
library(stats4)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Data <- read.csv("Especes_Sedum.csv")
Data$Rank<-rank( desc (Data$Images_Sedum))
Data
fr <- unlist(Data['Images_Sedum'])
p <- fr/sum(fr)
typeof(p)
len <- length(p)
typeof(fr)
rank <- unlist(Data['Rank'])
rank
loglikzipf <- function(parms,N) -parms[2]*log(rank + parms[1])-log(sum(1/(1:N + parms[1])^parms[2]))
#Sum of Squares
opt.f <- function(parms) sum((log(p)-loglikzipf(parms,length(p)))^2)
opt <- optim(par = c(2, 4), opt.f, lower = c(0,0), method = "L-BFGS-B")
#Maximum likelihood estimation
negloglikzipf <- function(parms1, parms2) sum(fr*(parms2*log(rank +parms1)+log(sum(1/(1:len + parms1)^parms2))))
fit <- mle(negloglikzipf,start=list(parms1=2, parms2=4))
opt$par
coef(fit)
plot(1:len,p, xlab="Species of Genera Sedum", ylab="Frequencies")
lines(1:len,exp(loglikzipf(opt$par,len)),col="red")
lines(1:len,exp(loglikzipf(coef(fit),len)),col="blue")
title(main = "Fitting Zipf-Mandelbrot for Genera Sedum")
legend(x = "topright", legend = c("Moindre Carrés", "Max Vraisemblance"), col = c("red", "blue"), lty = 1, cex = 0.8)
chisq.test(p, exp(loglikzipf(opt$par,length(p))))
chisq.test(p, exp(loglikzipf(coef(fit),length(p))))
