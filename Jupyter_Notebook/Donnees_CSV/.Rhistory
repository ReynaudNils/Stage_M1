Pdf_Mandelbrot <- function(parms){
invC <- sum(1/(1:N + parms[1])^parms[2])
return(1/(x2 + parms[1])^(parms[2])*(1/invC))
}
#D'abord juste le negloglikelihood
negloglik <- function(parms) {
invC <- sum(1/(1:N + parms[1])^parms[2])
return(-sum(log(1/((x2 + parms[1])^(parms[2])*invC))))
}
negloglik2 <- function(parms1, parms2) {
invC <- sum(1/(1:N + parms1)^parms2)
return(-sum(log(1/((x2 + parms1)^(parms2)*invC))))
}
#Ensuite avec le gradient en plus
negloglik3 <- function(parms) {
invC <- sum(1/(1:N + parms[1])^parms[2])
res <- -sum(log(1/((x2 + parms[1])^(parms[2])*invC)))
tampon <- sum(-parms[2]/(1:N + parms[1])^(parms[2]+1))
tampon2 <- sum(exp(-parms[2]*log(1:N + parms[1])))
tampon3 <- sum(-log(1:N + parms[1])*exp(-parms[2]*log(1:N + parms[1])))
A <- sum((parms[2]/(x2 + parms[1])) + (tampon/invC))
B <- sum(log(x2 + parms[1]) + (tampon3/tampon2))
attr(res, "gradient") <- c(A, B)
res
}
negloglik4 <- function(parms1, parms2) {
invC <- sum(1/(1:N + parms1)^parms2)
res <- -sum(log(1/((x2 + parms1)^(parms2)*invC)))
tampon <- sum(-parms2/(1:N + parms1)^(parms2+1))
tampon2 <- sum(exp(-parms2*log(1:N + parms1)))
tampon3 <- sum(-log(1:N + parms1)*exp(-parms2*log(1:N + parms1)))
A <- sum((parms2/(x2 + parms1)) + (tampon/invC))
B <- sum(log(x2 + parms1) + (tampon3/tampon2))
attr(res, "gradient") <- c(A, B)
res
}
#La fonction gradient
gradient <- function(parms) {
invC <- sum(1/(1:N + parms[1])^parms[2])
tampon <- sum(-parms[2]/(1:N + parms[1])^(parms[2]+1))
tampon2 <- sum(exp(-parms[2]*log(1:N + parms[1])))
tampon3 <- sum(-log(1:N + parms[1])*exp(-parms[2]*log(1:N + parms[1])))
A <- sum((parms[2]/(x2 + parms[1])) + (tampon/invC))
B <- sum(log(x2 + parms[1]) + (tampon3/tampon2))
return(c(A, B))
}
#Enfin avec la hessienne en plus, à coder avec les bons termes
#negloglik5 <- function(parms) {
#  invC <- sum(1/(1:N + parms[1])^parms[2])
#  res <- -sum(log(1/((x + parms[1])^(parms[2])*invC)))
#  tampon <- sum(-parms[2]/(1:N + parms[1])^(parms[2]+1))
#  tampon2 <- sum(exp(-parms[2]*log(1:N + parms[1])))
#  tampon3 <- sum(-log(1:N + parms[1])*exp(-parms[2]*log(1:N + parms[1])))
#  A <- sum((parms[2]/(x + parms[1]))) + (tampon/invC)
#  B <- sum(log(x + parms[1])) + (tampon3/tampon2)
#  H <- matrix(1:4, nrow=2, byrow=TRUE)
#  H[1,1] <- -sum(parms[2]/(x + parms[1])^2)
#  H[2,2] <- 0
#  H[1,2] <- sum(1/(x + parms[1]))
#  H[2,1] <- sum(1/(x + parms[1]))
#  attr(res, "gradient") <- c(A, B)
#  attr(res, "hessian") <- H
#  res
#}
#negloglik6 <- function(parms1, parms2) {
#  invC <- sum(1/(1:N + parms1)^parms2)
#  res <- -sum(log(1/((x + parms1)^(parms2)*invC)))
#  invC <- sum(1/(1:N + parms1)^parms2)
#  tampon <- sum(-parms2/(1:N + parms1)^(parms2+1))
#  tampon2 <- sum(exp(-parms2*log(1:N + parms1)))
#  tampon3 <- sum(-log(1:N + parms1)*exp(-parms2*log(1:N + parms1)))
#  A <- sum((parms2/(x + parms1))) + (tampon/invC)
#  B <- sum(log(x + parms1)) + (tampon3/tampon2)
#  H <- matrix(1:4, nrow=2, byrow=TRUE)
#  H[1,1] <- -sum(parms2/(x + parms1)^2)
#  H[2,2] <- 0
#  H[1,2] <- sum(1/(x + parms1))
#  H[2,1] <- sum(1/(x + parms1))
#  attr(res, "gradient") <- c(A, B)
#  attr(res, "hessian") <- H
#  res
#}
#On teste les fonctions
plot(Pdf_Mandelbrot(c(20, 20)))
negloglik(parms = c(2, 4))
negloglik2(2, 4)
negloglik3(parms = c(2, 4))
negloglik4(2, 4)
gradient(c(2, 4))
#Essayons différentes méthodes d'optimisation avec mle
#D'abord la méthode par défaut, Nelder-Mead, qui ne donne rien
mle(negloglik2, start=list(parms1=2, parms2=4), method = "Nelder-Mead")
#Ensuite d'autres méthodes ne fonctionnant pas
mle(negloglik2, start=list(parms1=2, parms2=4), method = "BFGS")
mle(negloglik2, start=list(parms1=2, parms2=4), method = "CG")
mle(negloglik2, start=list(parms1=2, parms2=4), method = "L-BFGS-B")
optim = optim(par = c(2, 4), fn = negloglik, lower = c(0,10), hessian = F, method='L-BFGS-B')
optim2 = optim(par = c(2, 4), fn = negloglik, gr = gradient, lower = c(0, 1e-12), hessian = F, method="L-BFGS-B")
optim
optim2
gradient(optim$par)
gradient(optim2$par)
plot(Pdf_Mandelbrot(optim$par), ylim=c(0, max(y)), col='blue')
lines(x2, y, type='l', col='red')
#Ensuite nlm, où le gradient doit être précisé comme attribut de la fonction, on utilise donc negloglik3
nlm <- nlm(negloglik, p=c(20,20), gradtol = 1e-12, steptol = 1e-9)
nlm2 = nlm(f = negloglik3, p = c(2, 4), hessian = F, check.analyticals=F, print.level=2, gradtol = 1e-12, steptol = 1e-9)
nlm2
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#library(stats4)
N <- 59    # the size of my dataset
Genera_Sedum <- read.csv("Especes_Sedum.csv")    # my dataset file
Genera_Sedum
Species <- read.csv("Especes.csv")
Genera <- read.csv("Especes2.csv")
Species
Genera
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Genera_Sedum$Rank<-rank( desc (Genera_Sedum$Images_Sedum))
Species$Rank<-rank( desc (Species$Images_Plante))
Genera$Rank<-rank( desc (Genera$Images_Genre))
Liste = list(Species$Rank, Genera$Rank, Genera_Sedum$Rank)
Liste2 = list(Species$Images_Plante, Genera$Images_Genre, Genera_Sedum$Images_Sedum)
x=Genera_Sedum$Images_Sedum
y=x/sum(x)
y
x2=Genera_Sedum$Rank
x2
sum(x)
#Représentons graphiquement nos données
plot(x2, y, type='l')
#Définissons la fonction maximum de vraisemblance
Pdf_Zipf <- function(parms){
invC <- sum(1/(1:N)^parms)
return(1/(x2)^(parms)*(1/invC))
}
negloglik <- function(parms) {
invC <- sum(1/(1:N)^parms)
return(-sum(log(1/((x2)^(parms)*invC))))
}
#Ensuite avec le gradient en plus
negloglik3 <- function(parms) {
invC <- sum(1/(1:N)^parms)
res <- -sum(log(1/((x2)^(parms)*invC)))
tampon <- sum(-parms/(1:N)^(parms+1))
tampon2 <- sum(exp(-parms*log(1:N)))
tampon3 <- sum(-log(1:N)*exp(-parms*log(1:N)))
A <- sum((parms/(x2)) + (tampon/invC))
B <- sum(log(x2) + (tampon3/tampon2))
attr(res, "gradient") <- c(A, B)
res
}
gradient <- function(parms) {
invC <- sum(1/(1:N)^parms)
tampon <- sum(-parms/(1:N)^(parms+1))
tampon2 <- sum(exp(-parms*log(1:N)))
tampon3 <- sum(-log(1:N)*exp(-parms*log(1:N)))
A <- sum((parms/(x2)) + (tampon/invC))
B <- sum(log(x2) + (tampon3/tampon2))
return(c(A, B))
}
#On teste les fonctions
plot(Pdf_Zipf(20))
negloglik(parms =  4)
#negloglik2(2, 4)
negloglik3(parms = 4)
#negloglik4(2, 4)
gradient(4)
#Essayons différentes méthodes d'optimisation avec mle
#D'abord la méthode par défaut, Nelder-Mead, qui ne donne rien
mle(negloglik, start=list(parms=4), method = "Nelder-Mead")
#Essayons différentes méthodes d'optimisation avec mle
#D'abord la méthode par défaut, Nelder-Mead, qui ne donne rien
mle(negloglik, start=list(parms=4), method = "Brent")
#Essayons différentes méthodes d'optimisation avec mle
#D'abord la méthode par défaut, Nelder-Mead, qui ne donne rien
mle(negloglik, start=list(parms=4), lower = 0, upper = 1e10, method = "Brent")
#Ensuite d'autres méthodes ne fonctionnant pas
mle(negloglik, start=list(parms=4), method = "BFGS")
mle(negloglik, start=list(parms=4), method = "CG")
mle(negloglik, start=list(parms=4), method = "L-BFGS-B")
#Let's use different general optimizers of R
#D'abord optim, où l'on peut préciser le gradient avec gr=...
#d'abord sans préciser le gradient, puis ensuite en le précisant
optim = optim(par = 4, fn = negloglik, lower = 1e-12, hessian = F, method='L-BFGS-B')
optim2 = optim(par = 4, fn = negloglik, gr = gradient, lower = 1e-12, hessian = F, method="L-BFGS-B")
optim
#Let's use different general optimizers of R
#D'abord optim, où l'on peut préciser le gradient avec gr=...
#d'abord sans préciser le gradient, puis ensuite en le précisant
optim = optim(par = 4, fn = negloglik, hessian = F, method='L-BFGS-B')
optim
#Vérifions que le gradient est nul aux points optimaux
gradient(optim$par)
gradient(optim2$par)
#Ensuite nlm, où le gradient doit être précisé comme attribut de la fonction, on utilise donc negloglik3
nlm <- nlm(negloglik, p=20, gradtol = 1e-12, steptol = 1e-9)
nlm2 = nlm(f = negloglik3, p = 4, hessian = F, check.analyticals=F, print.level=2, gradtol = 1e-12, steptol = 1e-9)
nlm2
gradient(nlm2$estimate)
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#On veut modéliser de la même manière pour chaque genre contenant un nombre suffisant d'espèces
#Modélisons le Genre Sedum
Genera_Sedum <- read.csv('Especes_Sedum.csv')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Genera_Acacia <- read.csv('Especes_Acacia.csv')
Genera_Trifolium <- read.csv('Especes_Trifolium.csv')
Genera_Hypericum <- read.csv('Especes_Hypericum.csv')
Genera_Ophrys <- read.csv('Especes_Ophrys.csv')
Genera_Anemone <- read.csv('Especes_Anemone.csv')
Genera_Cirsium <- read.csv('Especes_Cirsium.csv')
Genera_Pelargonium <- read.csv('Especes_Pelargonium.csv')
Genera_Peperomia <- read.csv('Especes_Peperomia.csv')
Genera_Lupinus <- read.csv('Especes_Lupinus.csv')
Genera_Dryopteris <- read.csv('Especes_Dryopteris.csv')
Genera_Lactuca <- read.csv('Especes_Lactuca.csv')
Genera_Tradescantia <- read.csv('Especes_Tradescantia.csv')
Genera_Alocasia <- read.csv('Especes_Alocasia.csv')
Genera_Papaver <- read.csv('Especes_Papaver.csv')
Genera_Crotalaria <- read.csv('Especes_Crotalaria.csv')
Genera_Phyllanthus <- read.csv('Especes_Phyllanthus.csv')
Genera_Dendrobium <- read.csv('Especes_Dendrobium.csv')
Genera_Anthurium <- read.csv('Especes_Anthurium.csv')
Genera_Lamium <- read.csv('Especes_Lamium.csv')
Genera_Sedum$Rank<-rank( desc (Genera_Sedum$Images_Sedum))
Genera_Acacia$Rank<-rank( desc (Genera_Acacia$Images_Acacia))
Genera_Trifolium$Rank<-rank( desc (Genera_Trifolium$Images_Trifolium))
Genera_Hypericum$Rank<-rank( desc (Genera_Hypericum$Images_Hypericum))
Genera_Ophrys$Rank<-rank( desc (Genera_Ophrys$Images_Ophrys))
Genera_Anemone$Rank<-rank( desc (Genera_Anemone$Images_Anemone))
Genera_Cirsium$Rank<-rank( desc (Genera_Cirsium$Images_Cirsium))
Genera_Pelargonium$Rank<-rank( desc (Genera_Pelargonium$Images_Pelargonium))
Genera_Peperomia$Rank<-rank( desc (Genera_Peperomia$Images_Peperomia))
Genera_Lupinus$Rank<-rank( desc (Genera_Lupinus$Images_Lupinus))
Genera_Dryopteris$Rank<-rank( desc (Genera_Dryopteris$Images_Dryopteris))
Genera_Lactuca$Rank<-rank( desc (Genera_Lactuca$Nombre_Images))
Genera_Tradescantia$Rank<-rank( desc (Genera_Tradescantia$Images_Tradescantia))
Genera_Alocasia$Rank<-rank( desc (Genera_Alocasia$Images_Alocasia))
Genera_Papaver$Rank<-rank( desc (Genera_Papaver$Images_Papaver))
Genera_Crotalaria$Rank<-rank( desc (Genera_Crotalaria$Images_Crotalaria))
Genera_Phyllanthus$Rank<-rank( desc (Genera_Phyllanthus$Images_Phyllanthus))
Genera_Dendrobium$Rank<-rank( desc (Genera_Dendrobium$Images_Dendrobium))
Genera_Anthurium$Rank<-rank( desc (Genera_Anthurium$Images_Anthurium))
Genera_Lamium$Rank<-rank( desc (Genera_Lamium$Images_Lamium))
Liste = list(Genera_Sedum$Rank, Genera_Acacia$Rank, Genera_Trifolium$Rank, Genera_Hypericum$Rank, Genera_Ophrys$Rank, Genera_Anemone$Rank, Genera_Cirsium$Rank, Genera_Pelargonium$Rank, Genera_Peperomia$Rank, Genera_Lupinus$Rank, Genera_Dryopteris$Rank, Genera_Lactuca$Rank, Genera_Tradescantia$Rank, Genera_Alocasia$Rank, Genera_Papaver$Rank, Genera_Crotalaria$Rank, Genera_Phyllanthus$Rank, Genera_Dendrobium$Rank, Genera_Anthurium$Rank, Genera_Lamium$Rank)
Liste2 = list(Genera_Sedum$Images_Sedum, Genera_Acacia$Images_Acacia, Genera_Trifolium$Images_Trifolium, Genera_Hypericum$Images_Hypericum, Genera_Ophrys$Images_Ophrys, Genera_Anemone$Images_Anemone, Genera_Cirsium$Images_Cirsium, Genera_Pelargonium$Images_Pelargonium, Genera_Peperomia$Images_Peperomia, Genera_Lupinus$Images_Lupinus, Genera_Dryopteris$Images_Dryopteris, Genera_Lactuca$Nombre_Images, Genera_Tradescantia$Images_Tradescantia, Genera_Alocasia$Images_Alocasia, Genera_Papaver$Images_Papaver, Genera_Crotalaria$Images_Crotalaria, Genera_Phyllanthus$Images_Phyllanthus, Genera_Dendrobium$Images_Dendrobium, Genera_Anthurium$Images_Anthurium, Genera_Lamium$Images_Lamium)
typeof(unlist(Liste[1]))
Genera_Sedum$Rank
typeof(unlist(Liste2[1]))
log(Genera_Sedum$Images_Sedum)
log(unlist(Liste2[1]))
Genera_Lamium
#R code
set.seed(8)
Liste3 = c()
Liste4 = c()
for (i in 1:20){
q.hats <- c()
beta.hats <- c()
ss.hats <- c()
for (bx in 1:10) {
q.mc <- c()
res.sq.mc <- c()
for (b in 1:30) {
q.b <- runif(1, 0, 100)
q.mc <- append(q.mc, q.b)
print(q.b)
print(length(q.b))
print(Liste)
print(length(unlist(Liste[i])))
res.sq.b <- sum( lm(log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) +q.b))$residuals^2)
res.sq.mc <- append(res.sq.mc, res.sq.b)
}
res.q.mc.dat <- data.frame(q.mc,res.sq.mc)
q.hat <- res.q.mc.dat[which(res.q.mc.dat$res.sq.mc == min(res.q.mc.dat$res.sq.mc) ),]$q.mc
beta.hat <- lm(log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) + q.hat))$coefficients[2]
ss.hat <- sum( lm(log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) + q.hat))$residuals^2)
q.hats <- append(q.hats, q.hat)
beta.hats <- append(beta.hats, beta.hat)
ss.hats <- append(ss.hats, ss.hat)
qbeta.dat <- data.frame(q.hats,beta.hats)
}
fit <- lm( log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) + mean(q.hats)))
Liste3[[(length(Liste3) + 1)]] <- fit
Liste4[[(length(Liste4) + 1)]] <- mean(q.hats)
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
#title(main="Plot avec le q optimisé")
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title(main="Plot avec le q optimisé")
}
Liste3 = list(Sedum, Acacia, Trifolium, Hypericum, Ophrys, Anemone, Cirsium, Pelargonium, Peperomia, Lupinus, Dryopteris, Lactuca, Tradescantia, Alocasia, Papaver, Crotalaria, Phyllanthus, Dendrobium, Anthurium, Lamium)
Liste3 = c(Sedum, Acacia, Trifolium, Hypericum, Ophrys, Anemone, Cirsium, Pelargonium, Peperomia, Lupinus, Dryopteris, Lactuca, Tradescantia, Alocasia, Papaver, Crotalaria, Phyllanthus, Dendrobium, Anthurium, Lamium)
Liste3 = c()
Liste3 = c(Sedum, Acacia, Trifolium, Hypericum, Ophrys, Anemone, Cirsium, Pelargonium, Peperomia, Lupinus, Dryopteris, Lactuca, Tradescantia, Alocasia, Papaver, Crotalaria, Phyllanthus, Dendrobium, Anthurium, Lamium)
Liste3 = [Sedum, Acacia, Trifolium, Hypericum, Ophrys, Anemone, Cirsium, Pelargonium, Peperomia, Lupinus, Dryopteris, Lactuca, Tradescantia, Alocasia, Papaver, Crotalaria, Phyllanthus, Dendrobium, Anthurium, Lamium]
Liste3 = c("Sedum", "Acacia", "Trifolium", "Hypericum", "Ophrys", "Anemone", "Cirsium", "Pelargonium", "Peperomia", "Lupinus", "Dryopteris", "Lactuca", "Tradescantia", "Alocasia", "Papaver", "Crotalaria", "Phyllanthus", "Dendrobium", "Anthurium", "Lamium")
for (i in 1:20){
print(Liste3[i])
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title(main="Plot avec le q optimisé")
}
for (i in 1:20){
print(Liste3[i])
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title(main="Plot avec le q optimisé", Liste3[i])
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title(main="Plot avec le q optimisé", Liste3[i])
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title(main="Plot avec le q optimisé", Liste3[i], i)
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title("Plot avec le q optimisé", Liste3[i], i)
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title("Plot avec le q optimisé", Liste3[i])
i
}
dev.off()
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title("Plot avec le q optimisé", Liste3[i])
}
Liste3[6]
getwd()
setwd('C:/Users/nilsr/Desktop/PRE/Stage_M1/Jupyter_Notebook/Donnees_CSV')
#On veut modéliser de la même manière pour chaque genre contenant un nombre suffisant d'espèces
#Modélisons le Genre Sedum
Genera_Sedum <- read.csv('Especes_Sedum.csv')
#install.packages("dplyr")
#desc <- dplyr::desc
#library(dplyr)
Genera_Acacia <- read.csv('Especes_Acacia.csv')
Genera_Trifolium <- read.csv('Especes_Trifolium.csv')
Genera_Hypericum <- read.csv('Especes_Hypericum.csv')
Genera_Ophrys <- read.csv('Especes_Ophrys.csv')
Genera_Anemone <- read.csv('Especes_Anemone.csv')
Genera_Cirsium <- read.csv('Especes_Cirsium.csv')
Genera_Pelargonium <- read.csv('Especes_Pelargonium.csv')
Genera_Peperomia <- read.csv('Especes_Peperomia.csv')
Genera_Lupinus <- read.csv('Especes_Lupinus.csv')
Genera_Dryopteris <- read.csv('Especes_Dryopteris.csv')
Genera_Lactuca <- read.csv('Especes_Lactuca.csv')
Genera_Tradescantia <- read.csv('Especes_Tradescantia.csv')
Genera_Alocasia <- read.csv('Especes_Alocasia.csv')
Genera_Papaver <- read.csv('Especes_Papaver.csv')
Genera_Crotalaria <- read.csv('Especes_Crotalaria.csv')
Genera_Phyllanthus <- read.csv('Especes_Phyllanthus.csv')
Genera_Dendrobium <- read.csv('Especes_Dendrobium.csv')
Genera_Anthurium <- read.csv('Especes_Anthurium.csv')
Genera_Lamium <- read.csv('Especes_Lamium.csv')
Genera_Sedum$Rank<-rank( desc (Genera_Sedum$Images_Sedum))
Genera_Acacia$Rank<-rank( desc (Genera_Acacia$Images_Acacia))
Genera_Trifolium$Rank<-rank( desc (Genera_Trifolium$Images_Trifolium))
Genera_Hypericum$Rank<-rank( desc (Genera_Hypericum$Images_Hypericum))
Genera_Ophrys$Rank<-rank( desc (Genera_Ophrys$Images_Ophrys))
Genera_Anemone$Rank<-rank( desc (Genera_Anemone$Images_Anemone))
Genera_Cirsium$Rank<-rank( desc (Genera_Cirsium$Images_Cirsium))
Genera_Pelargonium$Rank<-rank( desc (Genera_Pelargonium$Images_Pelargonium))
Genera_Peperomia$Rank<-rank( desc (Genera_Peperomia$Images_Peperomia))
Genera_Lupinus$Rank<-rank( desc (Genera_Lupinus$Images_Lupinus))
Genera_Dryopteris$Rank<-rank( desc (Genera_Dryopteris$Images_Dryopteris))
Genera_Lactuca$Rank<-rank( desc (Genera_Lactuca$Nombre_Images))
Genera_Tradescantia$Rank<-rank( desc (Genera_Tradescantia$Images_Tradescantia))
Genera_Alocasia$Rank<-rank( desc (Genera_Alocasia$Images_Alocasia))
Genera_Papaver$Rank<-rank( desc (Genera_Papaver$Images_Papaver))
Genera_Crotalaria$Rank<-rank( desc (Genera_Crotalaria$Images_Crotalaria))
Genera_Phyllanthus$Rank<-rank( desc (Genera_Phyllanthus$Images_Phyllanthus))
Genera_Dendrobium$Rank<-rank( desc (Genera_Dendrobium$Images_Dendrobium))
Genera_Anthurium$Rank<-rank( desc (Genera_Anthurium$Images_Anthurium))
Genera_Lamium$Rank<-rank( desc (Genera_Lamium$Images_Lamium))
Liste = list(Genera_Sedum$Rank, Genera_Acacia$Rank, Genera_Trifolium$Rank, Genera_Hypericum$Rank, Genera_Ophrys$Rank, Genera_Anemone$Rank, Genera_Cirsium$Rank, Genera_Pelargonium$Rank, Genera_Peperomia$Rank, Genera_Lupinus$Rank, Genera_Dryopteris$Rank, Genera_Lactuca$Rank, Genera_Tradescantia$Rank, Genera_Alocasia$Rank, Genera_Papaver$Rank, Genera_Crotalaria$Rank, Genera_Phyllanthus$Rank, Genera_Dendrobium$Rank, Genera_Anthurium$Rank, Genera_Lamium$Rank)
Liste2 = list(Genera_Sedum$Images_Sedum, Genera_Acacia$Images_Acacia, Genera_Trifolium$Images_Trifolium, Genera_Hypericum$Images_Hypericum, Genera_Ophrys$Images_Ophrys, Genera_Anemone$Images_Anemone, Genera_Cirsium$Images_Cirsium, Genera_Pelargonium$Images_Pelargonium, Genera_Peperomia$Images_Peperomia, Genera_Lupinus$Images_Lupinus, Genera_Dryopteris$Images_Dryopteris, Genera_Lactuca$Nombre_Images, Genera_Tradescantia$Images_Tradescantia, Genera_Alocasia$Images_Alocasia, Genera_Papaver$Images_Papaver, Genera_Crotalaria$Images_Crotalaria, Genera_Phyllanthus$Images_Phyllanthus, Genera_Dendrobium$Images_Dendrobium, Genera_Anthurium$Images_Anthurium, Genera_Lamium$Images_Lamium)
Liste5 = c("Sedum", "Acacia", "Trifolium", "Hypericum", "Ophrys", "Anemone", "Cirsium", "Pelargonium", "Peperomia", "Lupinus", "Dryopteris", "Lactuca", "Tradescantia", "Alocasia", "Papaver", "Crotalaria", "Phyllanthus", "Dendrobium", "Anthurium", "Lamium")
typeof(unlist(Liste[1]))
Genera_Sedum$Rank
typeof(unlist(Liste2[1]))
log(Genera_Sedum$Images_Sedum)
log(unlist(Liste2[1]))
Genera_Lamium
#R code
set.seed(8)
Liste3 = c()
Liste4 = c()
for (i in 1:20){
q.hats <- c()
beta.hats <- c()
ss.hats <- c()
for (bx in 1:10) {
q.mc <- c()
res.sq.mc <- c()
for (b in 1:30) {
q.b <- runif(1, 0, 100)
q.mc <- append(q.mc, q.b)
print(q.b)
print(length(q.b))
print(Liste)
print(length(unlist(Liste[i])))
res.sq.b <- sum( lm(log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) +q.b))$residuals^2)
res.sq.mc <- append(res.sq.mc, res.sq.b)
}
res.q.mc.dat <- data.frame(q.mc,res.sq.mc)
q.hat <- res.q.mc.dat[which(res.q.mc.dat$res.sq.mc == min(res.q.mc.dat$res.sq.mc) ),]$q.mc
beta.hat <- lm(log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) + q.hat))$coefficients[2]
ss.hat <- sum( lm(log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) + q.hat))$residuals^2)
q.hats <- append(q.hats, q.hat)
beta.hats <- append(beta.hats, beta.hat)
ss.hats <- append(ss.hats, ss.hat)
qbeta.dat <- data.frame(q.hats,beta.hats)
}
fit <- lm( log(unlist(Liste2[i])) ~ log(unlist(Liste[i]) + mean(q.hats)))
Liste3[[(length(Liste3) + 1)]] <- fit
Liste4[[(length(Liste4) + 1)]] <- mean(q.hats)
}
for (i in 1:20){
plot(unlist(Liste[i]) +unlist(Liste4[i]), unlist(Liste2[i]), type='l', log="xy")
title("Plot avec le q optimisé", Liste5[i])
}
Liste3[6]
Liste4[6]
help(lm)
Liste3[6]$coefficients
fit$coefficients
Liste3[6]
Liste4[6]
Species <- read.csv('Especes.csv')
Genera <- read.csv('Especes2.csv')
Species$Rank<-rank( desc (Species$Images_Plante))
Genera$Rank<-rank( desc (Genera$Images_Genre))
#R code Species
set.seed(8)
q.hats <- c()
beta.hats <- c()
ss.hats <- c()
for (bx in 1:10) {
q.mc <- c()
res.sq.mc <- c()
for (b in 1:300) {
q.b <- runif(1, 0, 100)
q.mc <- append(q.mc, q.b)
print(length(q.b))
print(q.b)
print(length(Species$Rank))
#print(Species$Rank)
res.sq.b <- sum( lm(log(Species$Images_Plante) ~ log(Species$Rank +q.b))$residuals^2)
res.sq.mc <- append(res.sq.mc, res.sq.b)
}
res.q.mc.dat <- data.frame(q.mc,res.sq.mc)
q.hat <- res.q.mc.dat[which(res.q.mc.dat$res.sq.mc == min(res.q.mc.dat$res.sq.mc) ),]$q.mc
beta.hat <- lm(log(Species$Images_Plante) ~ log(Species$Rank + q.hat))$coefficients[2]
ss.hat <- sum( lm(log(Species$Images_Plante) ~ log(Species$Rank + q.hat))$residuals^2)
q.hats <- append(q.hats, q.hat)
beta.hats <- append(beta.hats, beta.hat)
ss.hats <- append(ss.hats, ss.hat)
qbeta.dat <- data.frame(q.hats,beta.hats)
}
fit <- lm( log(Species$Images_Plante) ~ log(Species$Rank + mean(q.hats)))
fit
q <- signif(mean(q.hats), 4)
z <- signif(fit$coef[[2]], 4) * (-1)
q
z
plot(Species$Rank +mean(q.hats), Species$Images_Plante, type="l", log="xy")
title(main="Plot pour les espèces avec le q optimisé")
#R code Generas
set.seed(8)
q.hats2 <- c()
beta.hats2 <- c()
ss.hats2 <- c()
for (bx in 1:10) {
q.mc2 <- c()
res.sq.mc2 <- c()
for (b in 1:300) {
q.b2 <- runif(1, 0, 100)
q.mc2 <- append(q.mc2, q.b2)
res.sq.b2 <- sum( lm(log(Genera$Images_Genre) ~ log(Genera$Rank +q.b2))$residuals^2)
res.sq.mc2 <- append(res.sq.mc2, res.sq.b2)
}
res.q.mc.dat2 <- data.frame(q.mc2,res.sq.mc2)
q.hat2 <- res.q.mc.dat2[which(res.q.mc.dat2$res.sq.mc2 == min(res.q.mc.dat2$res.sq.mc2) ),]$q.mc2
beta.hat2 <- lm(log(Genera$Images_Genre) ~ log(Genera$Rank + q.hat2))$coefficients[2]
ss.hat2 <- sum( lm(log(Genera$Images_Genre) ~ log(Genera$Rank + q.hat2))$residuals^2)
q.hats2 <- append(q.hats2, q.hat2)
beta.hats2 <- append(beta.hats2, beta.hat2)
ss.hats2 <- append(ss.hats2, ss.hat2)
qbeta.dat2 <- data.frame(q.hats2,beta.hats2)
}
fit2 <- lm( log(Genera$Images_Genre) ~ log(Genera$Rank + mean(q.hats2)))
fit2
q2 <- signif(mean(q.hats2), 4)
z2 <- signif(fit2$coef[[2]], 4) * (-1)
q2
z2
plot(Genera$Rank +mean(q.hats2), Genera$Images_Genre, type="l", log="xy")
title(main="Plot pour les genresavec le q optimisé")
Species
Genera
